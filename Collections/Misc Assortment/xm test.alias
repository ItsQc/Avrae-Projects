multiline
<drac2>
# Backslash escaping any quotes in the command
# as to not break the syntax for the Avrae embed
def quoteNewlinesEscape(textIn):
    textOut = textIn.replace("'", "\\'")
    textOut = textOut.replace('"', '\\"')
    textOut = textOut.replace('\n', '\\n')
    return textOut

out = ['embed -desc "Your xmulti command failed!"']
if "xmultiLibrary" in get_uvars():
    library = load_json(get_uvar("xmultiLibrary"))
    out = [""]
    args = &ARGS&
    name = args.pop(0)
    if name in library:
        out[0] = ""
        xmulti = library[name]
        minArgs = int(xmulti["minArgs"])
        extraArgs = []
        if len(args) < minArgs:
            args = xmulti["defaultArgs"][(minArgs - len(args) - 1):]
        elif len(args) > minArgs:
            extraArgs = args[minArgs:]
        for i in range(len(xmulti["lines"])):
            line = xmulti["lines"][f'{i}']
            argsInLine = line.count('<')
            if (line.count('<') == line.count('>')):
                for j in range(argsInLine):
                    argMarkerLeft = line.find('<')
                    argMarkerRight = line.find('>') + 1
                    markerCharacter = line[argMarkerLeft + 1:argMarkerRight - 1]
                    if markerCharacter.isnumeric():
                        argValue = args[int(line[argMarkerLeft + 1:argMarkerRight - 1]) - 1]
                    else:
                        argValue = " ".join(extraArgs)
                        argValue = argValue[1:]

                    line = line.replace(line[argMarkerLeft:argMarkerRight], argValue)
            out.append(line)
    else:
        out.append(f"""embed -desc 'No xmulti command with the name \"{name}\" found'""")
else:
    out.append('embed -desc "You have not made any xmulti commands!"')

test = f' {ctx.prefix}'.join(out)
return f"""embed -desc '{test}\n {quoteNewlinesEscape(" ".join(args))}'"""
</drac2>